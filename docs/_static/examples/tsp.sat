n=5;

dist[n][n] = {
  (1,1): 0,
  (1,2): 4,
  (1,3): 4,
  (1,4): 9,
  (1,5): 0,

  (2,1): 4,
  (2,2): 0,
  (2,3): 9,
  (2,4): 4,
  (2,5): 4,

  (3,1): 4,
  (3,2): 9,
  (3,3): 0,
  (3,4): 4,
  (3,5): 4,

  (4,1): 9,
  (4,2): 4,
  (4,3): 4,
  (4,4): 0,
  (4,5): 9,

  (5,1): 0,
  (5,2): 4,
  (5,3): 4,
  (5,4): 9,
  (5,5): 0
};

tour[n][n]; # (town, tour position) pairs

# Low Penalty Level
LOW = 1;

# Fix both endpoints (the first town and its ghost town)
(int) mirror_town[LOW]: tour[1][1] and tour[n][n];

(int) visit_all_once[LOW]: 
    # Every city 'i' appears uniquely across the tour.
    forall{i = [1:n]} 
    unique{j = [1:n]}
    tour[i][j];

(int) fill_all_once[LOW]: 
    # Every tour position 'i' has exactly one city 'j' associated to it.
    unique{i = [1:n]}
    forall{j = [1:n]}
    tour[i][j];

(opt) backwards_cost:
    exists{i = [1:n]} # for each city 'i'
    exists{j = [1:n], i != j} # for eac h other city 'j'
    exists{k = [2:n]} # for each position
    (tour[i][k] and tour[j][k-1]) * dist[i][j];

(opt) forwards_cost:
    exists{i = [1:n]} # for each city 'i'
    exists{j = [1:n], i != j} # for each other city 'j'
    exists{k = [1:n-1]} # for each position
    (tour[i][k] and tour[j][k+1]) * dist[i][j];